{"ast":null,"code":"var _jsxFileName = \"/Users/vickywong/Documents/doggo-mart/src/Components/Home.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Products from \"./Products\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Banner from \"./Banner\";\nimport Filter from \"./Filter\";\nimport Basket from \"./Basket\";\n\nfunction Home() {\n  const [products, setProducts] = useState([]);\n  const [cartItems, setCartItems] = useState([]);\n  const [sortValue, setSortValue] = useState(\"ascending\");\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await fetch(\"http://localhost:8000/products\");\n      const unsortedProducts = await res.json();\n      console.log(unsortedProducts, \"unsortedProducts\");\n      const sorted = sortProducts(unsortedProducts, sortValue); // set this up to combat useState not changing immediately (prevstate, result)\n\n      setProducts(sorted);\n    };\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const storedCartItems = localStorage.cartItems;\n\n    if (storedCartItems) {\n      JSON.parse(storedCartItems);\n    } // localStorage.cartItems\n\n\n    console.log(\"cart item has changed\");\n  }, []); // array is the list of things that should trigger the useEffect, if empty, then nothing should trigger it except first time\n\n  const sortProducts = (list, sortValueToUse) => {\n    let sorted = list; // console.log(sorted, \"unsorted list\");\n\n    if (sortValueToUse === \"ascending\") {\n      sorted = list.sort((a, b) => a.price - b.price);\n    }\n\n    if (sortValueToUse === \"descending\") {\n      sorted = list.sort((a, b) => b.price - a.price);\n    } // console.log(sorted, \"sorted\");\n\n\n    return sorted;\n  }; // introducing another argument\n\n\n  const handleChangeSort = e => {\n    const newSortValue = e.target.value;\n    setSortValue(newSortValue);\n    const sorted = sortProducts(products, newSortValue);\n    setProducts(sorted); //setProducts() side effects, any of the ones that use useState setter functions = side effects\n\n    console.log(newSortValue, \"target value\");\n  };\n\n  const HandleAddToCart = product => {\n    const productInCart = cartItems.find(item => item.id === product.id);\n    let newCartItems = [...cartItems]; //new array,\n\n    if (productInCart) {\n      productInCart.count += 1;\n      console.log(productInCart.count, \"product In cart count\");\n    } else {\n      const newCartItem = product;\n      newCartItem.count = 1;\n      console.log(cartItems);\n      console.log(newCartItem.count, \"new item count\");\n      newCartItems = cartItems.concat(newCartItem);\n    }\n\n    console.log(\"final assignment\", newCartItems);\n    setCartItems(newCartItems);\n  };\n\n  const handleRemoveFromCart = product => {\n    const removedCartItems = cartItems.filter(a => a.id !== product.id);\n    setCartItems(removedCartItems);\n    console.log(removedCartItems, \"removed item\");\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Banner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"homepage-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Discover better-for-you Doggos\"), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Col, {\n    md: 9,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Filter, {\n    sortValue: sortValue,\n    handleChangeSort: handleChangeSort,\n    count: products.length,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(Products, {\n    products: products,\n    setProducts: setProducts,\n    HandleAddToCart: HandleAddToCart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Basket, {\n    cartItems: cartItems,\n    handleRemoveFromCart: handleRemoveFromCart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  })))));\n}\n\nexport default Home; //function supposed to be updating the page isn't running\n//console.log shows number of item is correct when added\n//however, cart is one step behind if it's same item\n// before we were mutating the old reference (e.g. let newCartItems = [cartItems];)\n// make an entire new copy of the state, and change that instead\n// react: thinks nothing changed cause reference is the same before creating a new copy\n//let newCartItems = [...cartItems]","map":{"version":3,"sources":["/Users/vickywong/Documents/doggo-mart/src/Components/Home.js"],"names":["React","useState","useEffect","Products","Container","Row","Col","Banner","Filter","Basket","Home","products","setProducts","cartItems","setCartItems","sortValue","setSortValue","fetchData","res","fetch","unsortedProducts","json","console","log","sorted","sortProducts","storedCartItems","localStorage","JSON","parse","list","sortValueToUse","sort","a","b","price","handleChangeSort","e","newSortValue","target","value","HandleAddToCart","product","productInCart","find","item","id","newCartItems","count","newCartItem","concat","handleRemoveFromCart","removedCartItems","filter","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Products from \"./Products\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Banner from \"./Banner\";\nimport Filter from \"./Filter\";\nimport Basket from \"./Basket\";\n\nfunction Home() {\n  const [products, setProducts] = useState([]);\n  const [cartItems, setCartItems] = useState([]);\n  const [sortValue, setSortValue] = useState(\"ascending\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await fetch(\"http://localhost:8000/products\");\n      const unsortedProducts = await res.json();\n      console.log(unsortedProducts, \"unsortedProducts\");\n      const sorted = sortProducts(unsortedProducts, sortValue);\n      // set this up to combat useState not changing immediately (prevstate, result)\n      setProducts(sorted);\n    };\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    const storedCartItems = localStorage.cartItems;\n    if (storedCartItems) {\n      JSON.parse(storedCartItems)\n    }\n    // localStorage.cartItems\nconsole.log(\"cart item has changed\")\n  }, []); // array is the list of things that should trigger the useEffect, if empty, then nothing should trigger it except first time\n\n  const sortProducts = (list, sortValueToUse) => {\n    let sorted = list;\n    // console.log(sorted, \"unsorted list\");\n    if (sortValueToUse === \"ascending\") {\n      sorted = list.sort((a, b) => a.price - b.price);\n    }\n    if (sortValueToUse === \"descending\") {\n      sorted = list.sort((a, b) => b.price - a.price);\n    }\n    // console.log(sorted, \"sorted\");\n    return sorted;\n  };\n\n  // introducing another argument\n\n  const handleChangeSort = (e) => {\n    const newSortValue = e.target.value;\n    setSortValue(newSortValue);\n    const sorted = sortProducts(products, newSortValue);\n    setProducts(sorted);\n    //setProducts() side effects, any of the ones that use useState setter functions = side effects\n    console.log(newSortValue, \"target value\");\n  };\n\n  const HandleAddToCart = (product) => {\n    const productInCart = cartItems.find((item) => item.id === product.id);\n    let newCartItems = [...cartItems]; //new array,\n    if (productInCart) {\n      productInCart.count += 1;\n      console.log(productInCart.count, \"product In cart count\");\n    } else {\n      const newCartItem = product;\n      newCartItem.count = 1;\n      console.log(cartItems);\n      console.log(newCartItem.count, \"new item count\");\n      newCartItems = cartItems.concat(newCartItem);\n    }\n    console.log(\"final assignment\", newCartItems);\n    setCartItems(newCartItems);\n  };\n\n  const handleRemoveFromCart = (product) => {\n    const removedCartItems = cartItems.filter((a) => a.id !== product.id);\n    setCartItems(removedCartItems);\n    console.log(removedCartItems, \"removed item\");\n  };\n\n  return (\n    <div>\n      <Banner />\n      <Container>\n        <h1 className=\"homepage-title\">Discover better-for-you Doggos</h1>\n\n        <Row>\n          <Col md={9}>\n            <Filter\n              sortValue={sortValue}\n              handleChangeSort={handleChangeSort}\n              count={products.length}\n            />\n\n            <hr />\n\n            <Products\n              products={products}\n              setProducts={setProducts}\n              HandleAddToCart={HandleAddToCart}\n            />\n          </Col>\n\n          <Col>\n            <Basket\n              cartItems={cartItems}\n              handleRemoveFromCart={handleRemoveFromCart}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default Home;\n\n//function supposed to be updating the page isn't running\n//console.log shows number of item is correct when added\n//however, cart is one step behind if it's same item\n\n// before we were mutating the old reference (e.g. let newCartItems = [cartItems];)\n// make an entire new copy of the state, and change that instead\n// react: thinks nothing changed cause reference is the same before creating a new copy\n//let newCartItems = [...cartItems]\n"]},"metadata":{},"sourceType":"module"}